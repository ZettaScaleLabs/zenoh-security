// Config for testing all available plugins
// 
// To run it do these steps:
//
// 1. Clone these repositories:
// ```
// git clone https://github.com/eclipse-zenoh/zenoh.git
// git clone https://github.com/eclipse-zenoh/zenoh-backend-influxdb.git
// git clone https://github.com/eclipse-zenoh/zenoh-backend-rocksdb.git
// git clone https://github.com/eclipse-zenoh/zenoh-backend-filesystem.git
// git clone https://github.com/eclipse-zenoh/zenoh-plugin-webserver.git
// git clone https://github.com/eclipse-zenoh/zenoh-plugin-mqtt.git
// git clone https://github.com/eclipse-zenoh/zenoh-plugin-dds.git
// git clone https://github.com/eclipse-zenoh/zenoh-plugin-ros1.git
// git clone https://github.com/eclipse-zenoh/zenoh-plugin-ros2dds.git
// ```
//
// 1.1. Init submodules for zenoh-plugin-ros1
// ```
// cd zenoh-plugin-ros1
// git submodule init
// git submodule update
// ```
//
// 2. Build projects
// ```
// cd zenoh && cargo build && cd ..
// cd zenoh-backend-influxdb && cargo build && cd ..
// ...
// ```
//
// 3. Run the zenohd server with this config file.
//
// Explicit setting RUST_LOG=info is important: without it the logs are printed by zenohd itsellf, but not by plugins.
// ```
// cd zenoh
// RUST_LOG=info cargo run -- --config plugin_test_config.json5
// ```
// 
// Some errors on plugin initalisation are expected due to some mandtatory properties missing in the config file, like for "influxdb" and "influxdb2" volumes.
// Though there supposedly should not be plugin loading errors due to not found files or version incompatibility
//
//
// 4. Test access plugin status through admin space
//
// The plugins information is available by "@/router/{router_id}/plugins/**". Each plugin provides by this key the json object with its status.
// Subplugins are also available by this key, e.g. "@/router/{router_id}/plugins/storage_manager/influxdb".
// ```
// cargo run --example z_get -- -s "@/router/*/plugins/**"
// ```
// result is
// ```
//  Received ('@/router/b04a929103101296abec19ea6cddd034/plugins/example': '{"long_version":"v0.11.0-dev-182-g48060b9c","name":"example","path":"/Users/milyin/ZS2/zenoh/target/debug/libzenoh_plugin_example.dylib","report":{"level":"Normal"},"state":"Started","version":"0.11.0-dev"}')
/// Received ('@/router/b04a929103101296abec19ea6cddd034/plugins/storage_manager': '{"long_version":"v0.11.0-dev-182-g48060b9c","name":"storage_manager","path":"/Users/milyin/ZS2/zenoh/target/debug/libzenoh_plugin_storage_manager.dylib","report":{"level":"Normal"},"state":"Started","version":"0.11.0-dev"}')
/// Received ('@/router/b04a929103101296abec19ea6cddd034/plugins/storage_manager/memory': '{"long_version":"v0.11.0-dev-182-g48060b9c","name":"storage_manager/memory","path":"<static>","report":{"level":"Normal"},"state":"Started","version":"0.11.0-dev"}')
// ...
// ```
// 
// There is also plugin information by path "@/router/*/status/plugins/**". Later these paths should be combined
// ```
// cargo run --example z_get -- -s "@/router/*/status/plugins/**"
// ```
// result is
// ```
// >> Received ('@/router/b04a929103101296abec19ea6cddd034/status/plugins/example/__path__': '/Users/milyin/ZS2/zenoh/target/debug/libzenoh_plugin_example.dylib')
// >> Received ('@/router/b04a929103101296abec19ea6cddd034/status/plugins/storage_manager/__path__': '/Users/milyin/ZS2/zenoh/target/debug/libzenoh_plugin_storage_manager.dylib')
// >> Received ('@/router/b04a929103101296abec19ea6cddd034/status/plugins/storage_manager/volumes/memory/__path__': '"<static>"')
// >> Received ('@/router/b04a929103101296abec19ea6cddd034/status/plugins/storage_manager/volumes/memory': '{"__required__":false}')
// >> Received ('@/router/b04a929103101296abec19ea6cddd034/status/plugins/storage_manager/storages/memory': '{"key_expr":"demo/memory/**","volume":"memory"}')
// ```
// 
{
  "plugins_search_dirs": [
    "target/debug",
    "../zenoh-plugin-webserver/target/debug",
    "../zenoh-plugin-mqtt/target/debug",
    "../zenoh-plugin-dds/target/debug",
    "../zenoh-plugin-ros1/target/debug",
    "../zenoh-plugin-ros2dds/target/debug"
  ],

  "plugins": {
    // mqtt plugin, see "../zenoh-plugin-mqtt"
    "mqtt": {},
    // dds plugin, see "../zenoh-plugin-dds"
    "dds": {},
    // ros1 plugin, see "../zenoh-plugin-ros1"
    "ros1": {},
    // ros2dds plugin, see "../zenoh-plugin-ros2dds"
    "ros2dds": {},
    // example plugin, see "plugins/zenog-plugin-example"
    "example": {},
    // rest plugin, see "plugins/zenoh-plugin-rest"
    "rest": {
        "http_port": 8080,
    },
    // storage mangaer plugin, see "plugins/zenoh-plugin-storage-manager"
    // supports different backends implemented as plugins also
    "storage_manager": {
       backend_search_dirs: [
          "target/debug",
          "../zenoh-backend-influxdb/target/debug",
          "../zenoh-backend-rocksdb/target/debug",
          "../zenoh-backend-filesystem/target/debug"
       ],
      "volumes": {
        // example backend, see "plugins/zenoh-backend-example"
        "example": {},
        // influxdb backend from "../zenoh-backend-influxdb/v1"
        "influxdb": {},
        // influxdb backend from "../zenoh-backend-influxdb/v2"
        "influxdb2": {},
        // rocksdb backend, see "plugins/zenoh-backend-rocksdb"
        "rocksdb": {},
        // filesystem backend, see "plugins/zenoh-backend-filesystem"
        "fs": {}
      },
      "storages": {
        "memory": {
          "volume": "memory",
          "key_expr": "demo/memory/**"
        },
        "example": {
          "volume": "example",
          "key_expr": "demo/example/**"
        },
       }
    },
  }
}
